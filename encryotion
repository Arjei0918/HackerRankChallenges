#include <assert.h>
#include <ctype.h>
#include <limits.h>
#include <math.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

char* readline();

/*
 * Complete the 'encryption' function below.
 *
 * The function is expected to return a STRING.
 * The function accepts STRING s as parameter.
 */

/*
 * To return the string from the function, you should either do static allocation or dynamic allocation
 *
 * For example,
 * char* return_string_using_static_allocation() {
 *     static char s[] = "static allocation of string";
 *
 *     return s;
 * }
 *
 * char* return_string_using_dynamic_allocation() {
 *     char* s = malloc(100 * sizeof(char));
 *
 *     s = "dynamic allocation of string";
 *
 *     return s;
 * }
 *
 */
char* encryption(char* s) {
    // Step 1: Remove spaces
    int len = strlen(s);
    char* clean = malloc((len + 1) * sizeof(char));
    int clean_len = 0;

    for (int i = 0; i < len; i++) {
        if (s[i] != ' ') {
            clean[clean_len++] = s[i];
        }
    }
    clean[clean_len] = '\0';

    // Step 2: Compute grid size
    double root = sqrt(clean_len);
    int rows = floor(root);
    int cols = ceil(root);

    if (rows * cols < clean_len) {
        rows++;
    }

    // Step 3: Build encrypted string
    // Max size: (columns * (rows + 1 for space)) + null terminator
    int result_len = cols * (rows + 1);
    char* result = malloc(result_len * sizeof(char));
    int idx = 0;

    for (int c = 0; c < cols; c++) {
        for (int r = 0; r < rows; r++) {
            int pos = r * cols + c;
            if (pos < clean_len) {
                result[idx++] = clean[pos];
            }
        }
        result[idx++] = ' ';
    }

    if (idx > 0 && result[idx - 1] == ' ') {
        idx--; // remove trailing space
    }

    result[idx] = '\0';

    free(clean);
    return result;
}

int main()
{
    FILE* fptr = fopen(getenv("OUTPUT_PATH"), "w");

    char* s = readline();

    char* result = encryption(s);

    fprintf(fptr, "%s\n", result);

    fclose(fptr);

    return 0;
}

char* readline() {
    size_t alloc_length = 1024;
    size_t data_length = 0;

    char* data = malloc(alloc_length);

    while (true) {
        char* cursor = data + data_length;
        char* line = fgets(cursor, alloc_length - data_length, stdin);

        if (!line) {
            break;
        }

        data_length += strlen(cursor);

        if (data_length < alloc_length - 1 || data[data_length - 1] == '\n') {
            break;
        }

        alloc_length <<= 1;

        data = realloc(data, alloc_length);

        if (!data) {
            data = '\0';

            break;
        }
    }

    if (data[data_length - 1] == '\n') {
        data[data_length - 1] = '\0';

        data = realloc(data, data_length);

        if (!data) {
            data = '\0';
        }
    } else {
        data = realloc(data, data_length + 1);

        if (!data) {
            data = '\0';
        } else {
            data[data_length] = '\0';
        }
    }

    return data;
}
